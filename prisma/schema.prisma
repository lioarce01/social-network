generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb" // or "postgresql", "mysql", etc.
  url      = env("DATABASE_URL")
}

// entities
model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  sub              String           @unique
  name             String
  headline         String?
  country          String?
  postal_code      String?
  city             String?
  current_position String?
  email            String           @unique
  profile_pic      String
  enabled          Boolean          @default(true)
  role             Role             @default(USER)
  posts            Post[]
  comments         Comment[]
  likedPosts       PostLike[]
  jobPostings      JobPosting[]
  applications     JobApplication[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now())

  followers      UserFollow[] @relation("UserFollowers")
  following      UserFollow[] @relation("UserFollowing")
  followingCount Int @default(0)
  followersCount Int @default(0)
}

model Post {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  authorId  String     @db.ObjectId
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     PostLike[]
  likeCount Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model PostLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model JobPosting {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  budget           Float
  deadline         DateTime
  techRequired     String[]
  category         String
  status           JobPostingStatus
  location         String
  mode             Mode
  experience_level String
  applicants       JobApplication[]
  jobAuthorId      String           @db.ObjectId
  jobAuthor        User             @relation(fields: [jobAuthorId], references: [id], onDelete: Cascade)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model JobApplication {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  jobPostingId String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  isRejected   Boolean    @default(false)
  appliedAt    DateTime   @default(now())

  @@unique([userId, jobPostingId])
}

model UserFollow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

enum JobPostingStatus {
  OPEN
  CLOSED
}

enum Role {
  USER
  ADMIN
}

enum Mode {
  REMOTE
  HYBRID
  ONSITE
}
